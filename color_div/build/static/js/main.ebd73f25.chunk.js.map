{"version":3,"sources":["component/ColoredDiv.js","App.js","index.js"],"names":["ColoredDiv","props","useState","width","setWidth","updateWidth","window","innerWidth","useEffect","console","log","color","addEventListener","removeEventListener","styles","background","flex","style","className","onClick","handleRemove","index","App","colors","setColors","e","newArr","filter","d","i","colorsArr","map","colorData","randomColor","Math","floor","random","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wOAqCeA,EAlCI,SAACC,GAClB,MAA0BC,mBAAS,GAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAEMC,EAAc,WAClBD,EAASE,OAAOC,aAIlBC,qBAAU,WAIR,OAHAC,QAAQC,IAAR,qBAA0BT,EAAMU,MAAhC,4CAAiFR,GACjFE,IACAC,OAAOM,iBAAiB,SAAUP,GAC3B,kBAAMC,OAAOO,oBAAoB,SAAUR,MAClD,IAEF,IAAIS,EAAS,CACXC,WAAYd,EAAMU,MAEnBK,KAAMb,EAAQ,KAAR,iBAGP,OACE,mCACE,sBACEc,MAAOH,EACPI,UAAU,cAFZ,UAIGjB,EAAMU,MACP,wBAAQQ,QAAS,kBAAMlB,EAAMmB,aAAanB,EAAMoB,QAAhD,0BC3BO,SAASC,IACtB,MAA4BpB,mBAAS,CAAC,aAAc,OAAQ,cAA5D,mBAAOqB,EAAP,KAAeC,EAAf,KACA,EAA0BtB,mBAAS,GAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAEMC,EAAc,WAClBD,EAASE,OAAOC,aAGlBC,qBAAU,WACRH,IACAI,QAAQC,IAAI,8CAA+CP,GAC3DG,OAAOM,iBAAiB,SAAUP,KACjC,IAEH,IAAMe,EAAe,SAACK,GACpBhB,QAAQC,IAAIe,GACZ,IAAMC,EAASH,EAAOI,QAAO,SAACC,EAAGC,GAAJ,OAAUA,IAAMJ,KAC7CD,EAAUE,IAGNI,EAAYP,EAAOQ,KAAK,SAACH,EAAEC,GAC/B,OACA,cAAC,EAAD,CAAYlB,MAAOiB,EAAWP,MAAOQ,EAAGT,aAAcA,GAA3BS,MAQ7B,OACE,sBAAKX,UAAU,MAAf,UACA,wDAA2Bf,KAC3B,qBAAKe,UAAU,eAAf,SACGY,IAEH,wBAAQX,QAXa,WACrB,IAAMa,EAAY,CAAC,SAAU,QAAS,UAClCC,EAAcC,KAAKC,MAAMD,KAAKE,SAAWJ,EAAUK,QACvDb,EAAU,GAAD,mBAAKD,GAAL,CAAaS,EAAUC,OAQhC,8BCnCJK,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAClB,EAAD,MAEFmB,SAASC,eAAe,W","file":"static/js/main.ebd73f25.chunk.js","sourcesContent":["// IMPORT useEffect\nimport React, { useState, useEffect } from 'react';\n\nconst ColoredDiv = (props) => {\n  const [width, setWidth] = useState(0);\n\n  const updateWidth = () => {\n    setWidth(window.innerWidth)\n  }\n\n  // SETUP useEffect\n  useEffect(() => {\n    console.log(`ColoredDiv ${props.color} - useEffect - ComponentDidMount - width`, width);\n    updateWidth()\n    window.addEventListener('resize', updateWidth)\n    return () => window.removeEventListener(\"resize\", updateWidth)\n  },[]);\n\n  let styles = {\n    background: props.color,\n   // add conditional logic here\n   flex: width > 1023 ? `1 0 0`: `0 0 0`\n  }\n  \n  return (\n    <>\n      <div \n        style={styles}\n        className=\"colored-div\"\n        >\n        {props.color}\n        <button onClick={() => props.handleRemove(props.index)}>Remove</button>\n      </div>\n    </>\n  );\n}\n\nexport default ColoredDiv","import React, { useState, useEffect } from \"react\";\nimport \"./styles.css\";\nimport ColoredDiv from './component/ColoredDiv'\n\nexport default function App() {\n  const [colors, setColors] = useState(['lightgreen', 'pink', 'lightblue'])\n  const [width, setWidth] = useState(0)\n\n  const updateWidth = () => {\n    setWidth(window.innerWidth)\n  }\n\n  useEffect(() => {\n    updateWidth()\n    console.log('App - useEffect - ComponentDidMount - width', width);\n    window.addEventListener('resize', updateWidth);\n  }, []);\n\n  const handleRemove = (e) => {\n    console.log(e)\n    const newArr = colors.filter((d, i) => i !== e)\n    setColors(newArr);\n  }\n\n  const colorsArr = colors.map( (d,i) => {\n    return (\n    <ColoredDiv color={d} key={i} index={i} handleRemove={handleRemove}/>)\n  })\n  \n  const handleAddColor = () => {\n    const colorData = ['yellow', 'black', 'orange']\n    let randomColor = Math.floor(Math.random() * colorData.length)\n    setColors([...colors, colorData[randomColor]])\n  }\n  return (\n    <div className=\"App\">\n    <h1>Current Window Width: {width}</h1>\n    <div className='colored-divs'>\n      {colorsArr}\n    </div>\n    <button onClick={handleAddColor}>Add New Color</button>\n  </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}